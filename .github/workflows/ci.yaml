name: CI

on:
  push:
    branches: [ main ]
    tags:
      - '*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: fastify-benchmark

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3

    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ github.actor}}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha, format=long

    - name: Build and push Docker image
      id: docker
      uses: docker/build-push-action@v3.0.0
      with:
        context: .
        file: fastify-postgres.dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    # so that we get the remote repository digest instead of local digest
    - name: Get image digest
      id: digest
      run: echo "::set-output name=digest::$(docker inspect ${{ steps.build.outputs.digest }} | jq -r '.[].RepoDigests[0] | split("@") | .[1]')"

    - name: Checkout deployment Repository
      uses: actions/checkout@v2
      with:
        repository: zheli/deversifi
        path: deploy-config
        token: ${{ secrets.BOT_PAT }}

    - name: printout docker imageid output
      run: echo "${{ steps.docker.outputs.digest}}"

    - name: Check digest
      run: |
        if [ -z "${{ steps.docker.outputs.digest }}" ]; then
        echo "::error::Digest should not be empty"
        exit 1
        fi

    - name: Update image digest
      uses: fjogeleit/yaml-update-action@v0.10.0
      with:
        valueFile: 'kubernetes/argocd-applications/backend.yaml'
        propertyPath: 'spec.source.helm.parameters[0].value'
        value: ${{ steps.digest.outputs.digest}}
        repository: zheli/deversifi
        token: ${{ secrets.BOT_PAT }}
        workDir: deploy-config
        branch: main
        masterBranchName: main
        targetBranch: main
        createPR: false
        message: 'Update Image Digest to ${{ steps.docker.outputs.digest }}'
